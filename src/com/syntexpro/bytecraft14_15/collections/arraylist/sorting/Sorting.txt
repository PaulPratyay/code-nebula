
                    >>How to Sort ArrayList in Java<<

-> In Java, Collection is a framework that provides interfaces(Set, List, Queue, etc.) and classes (ArrayList, LinkedList, etc.) to store the group of objects;
-> These classes store data in an unordered manner;
-> Sometimes we need to arrange data in an ordered manner which is known as Sorting;
-> The sorting can be performed in two ways either in ascending or descending order;

-> The Collections class provides two methods to sort an ArrayList in Java;

    i) sort();
   ii) reverseOrder();

                >>Collections.sort() Method<<

-> An ArrayList can be sorted by using the sort() method of the Collection class in Java;
-> It accepts an object of ArrayList as a parameter to be sort and returns an ArrayList sorted in the ascending order according to the natural ordering of its elements;

-> All elements in the ArrayList ,ust be mutually comparable, else it throws ClassCastException;
-> Here, mutually comparable means the list must have the same type of elements;

For Example:

        ArrayList<String> list = new ArrayList<String>();

        list.add("Computer");
        list.add(123);
        list.add("Hard Disk");
        list.add("DRAM");

-> In the above example, we see that a list has four elements out of which three elements are of String type and one is Integer type;
-> The three elements that are String are mutually comparable but the element that is of Integer type is not comparable with the other three;
-> Hence, the list must have the same type of elements.

            >>Collections.reverseOrder() Method<<

-> If we want to sort ArrayList in descending order, Java Collections class provides reverseOrder() method;
-> It allows us to sort the ArrayList in reverse-lexicographic order;
-> It returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface;

-> Remember that we do not directly invoke the reverseOrder() method;
-> We use it along with the Collection.sort()method;


                    **By default, sorting is done in Ascending Order**


